name: Generate downloads repository

on:
  push:
    branch:
      - main
      - 'openwrt-*'

jobs:
  key-generation:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      HAVE_TOKEN_KEY_PRIVATE: ${{ secrets.TOKEN_KEY_BUILD_PRIVATE != '' }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
        if: ${{ env.HAVE_TOKEN_KEY_PRIVATE != 'true' }}
      - run: |
          echo "artifacts_dir=${ARTIFACTS_DIR:-$GITHUB_WORKSPACE}" >> "$GITHUB_OUTPUT"
        shell: bash
        id: inputs
        if: ${{ env.HAVE_TOKEN_KEY_PRIVATE != 'true' }}
      - run: sudo chown -R 1000:1000 ${{ steps.inputs.outputs.artifacts_dir }}
        shell: bash
        if: ${{ env.HAVE_TOKEN_KEY_PRIVATE != 'true' }}
      - name: GENERATE KEY_BUILD
        if: ${{ env.HAVE_TOKEN_KEY_PRIVATE != 'true' }}
        uses: rafaelcalleja/docker-run-action@v3
        with:
          image: openwrt/sdk:latest
          options: -e GITHUB_REPOSITORY -e GH_TOKEN -v ${{ steps.inputs.outputs.artifacts_dir }}:/artifacts
          run: |
            set -x
            mkdir -p /artifacts/keys/
            ./staging_dir/host/bin/usign -G -s /artifacts/keys/key-build -p /artifacts/keys/key-build.pub -c "build key ${{ github.action_repository }}:${{ github.sha }}"
            FINGERPRINT=$(./staging_dir/host/bin/usign -F -p /artifacts/keys/key-build.pub)
            mv /artifacts/keys/key-build.pub /artifacts/keys/$FINGERPRINT
      - run: sudo chown -R --reference=${{ steps.inputs.outputs.artifacts_dir }}/.. ${{ steps.inputs.outputs.artifacts_dir }}
        shell: bash
      - name: Store targets
        if: ${{ env.HAVE_TOKEN_KEY_PRIVATE != 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: generate-keys-${{ github.run_id }}
          path: keys/
          if-no-files-found: error
      - uses: actions/download-artifact@v3
        if: ${{ env.HAVE_TOKEN_KEY_PRIVATE != 'true' }}
        with:
          name: generate-keys-${{ github.run_id }}
          path: keys/
      - name: Generate Secrets
        if: ${{ env.HAVE_TOKEN_KEY_PRIVATE != 'true' }}
        run : |
          export KEY_BUILD="$(cat keys/key-build)"
          gh secret set TOKEN_KEY_BUILD_PRIVATE --body "$KEY_BUILD"
          rm keys/key-build
      - name: Commit Keys
        if: ${{ env.HAVE_TOKEN_KEY_PRIVATE != 'true' }}
        run: |
          git config user.name  github-actions
          git config user.email github-actions@github.com
          rm .keys/* -rf
          git rm -r .keys/*
          mkdir -p .keys/
          cp keys/* .keys/
          git add .keys/*
          git commit -m "bump key build public"
          git push
  pages-release:
    needs:
      - key-generation
    name: Main ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          #- arch: arc_archs
          #  target: archs38-generic
          #  runtime_test: false
          #
          #- arch: arm_cortex-a9_vfpv3-d16
          #  target: mvebu-cortexa9
          #  runtime_test: false

          #- arch: mips_24kc
          #  target: ath79-generic
          #  runtime_test: false

          - arch: mipsel_24kc
            target: mt7621
            container: openwrtorg/sdk

          - arch: ramips-mt7621
            target: mt7621
            container: openwrtorg/sdk
          #
          #- arch: powerpc_464fp
          #  target: apm821xx-nand
          #  runtime_test: false
          #
          #- arch: powerpc_8540
          #  target: mpc85xx-p1010
          #  runtime_test: false
          #
          #- arch: aarch64_cortex-a53
          #  target: mvebu-cortexa53
          #  runtime_test: true
          #
          #- arch: arm_cortex-a15_neon-vfpv4
          #  target: armvirt-32
          #  runtime_test: true
          #
          #- arch: i386_pentium-mmx
          #  target: x86-geode
          #  runtime_test: true
          #
          #- arch: x86_64
          #  target: x86-64
          #  runtime_test: true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Determine branch name
        run: |
          BRANCH="${GITHUB_BASE_REF#refs/heads/}"
          
          if [ -z "$BRANCH" ]; then
            BRANCH=${GITHUB_REF##*/}            
          fi
          
          if [ -z "$BRANCH" ]; then
            BRANCH=${{ github.ref_name }}
          fi
          
          if [ "$BRANCH" == "main" ] || [ -z "$BRANCH" ]; then
            BRANCH=master            
          fi
          
          echo "Building for $BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
      - name: Determine changed packages
        run: |
          PKG_ROOTS=$(find . -name Makefile | \
            grep -v ".*/src/Makefile" | \
            sed -e 's@./\(.*\)/Makefile@\1/@')

          for ROOT in $PKG_ROOTS; do
            PACKAGES+=$(echo "$ROOT" | sed -e 's@.*/\(.*\)/@\1 @')
            break
          done

          # fallback to test packages if nothing explicitly changes this is
          # should run if other mechanics in packages.git changed
          PACKAGES="${PACKAGES:-vim attendedsysupgrade-common bmon}"

          echo "Building $PACKAGES"
          echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=${{ matrix.arch }}-${{ env.BRANCH }}" >> $GITHUB_ENV
          echo "ARCH=${{ matrix.arch }}-${{ env.BRANCH }}" >> $GITHUB_ENV


      - name: Compile packages in the feed
        uses: rafaelcalleja/gh-action-sdk@0.0.1
        env:
          CONTAINER: ${{ matrix.container }}
          ARCH: ${{ env.ARCH }}
          FEEDNAME: packages_ci
          NO_DEFAULT_FEEDS: true
          NO_REFRESH_CHECK: true
          NO_SHFMT_CHECK: true
          KEY_BUILD: ${{ secrets.TOKEN_KEY_BUILD_PRIVATE }}
          PACKAGES: ${{ env.PACKAGES }}
          V: s

      - name: Store targets
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.ARCHIVE_NAME}}-targets
          path: bin/targets/
          if-no-files-found: error

      - uses: actions/download-artifact@v3
        with:
          name: ${{env.ARCHIVE_NAME}}-targets
          path: bin/targets/
      - name: Deploy created packages to gh-pages
        run: |
          git checkout gh-pages 
          mkdir -p "resources/${{ env.BRANCH }}/targets" -p
          cp -R bin/targets/* "resources/${{ env.BRANCH }}/targets"
          git config user.name  github-actions
          git config user.email github-actions@github.com
          git add resources
          (git commit -m "bump packages" && git push) || true        
